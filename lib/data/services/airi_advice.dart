import 'dart:math';
import 'transactions_service.dart';
import 'budgets_service.dart';
import 'goals_service.dart';

class AiriAdviceService {
  final _tx = TransactionsService();
  final _budgets = BudgetsService();
  final _goals = GoalsService();

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ Airi –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
  Future<List<String>> getAdvice() async {
    final tips = <String>[];

    // 1) –ë–∞–ª–∞–Ω—Å
    final balance = _tx.currentBalance();
    if (balance < 0) {
      tips.add('–ë–∞–ª–∞–Ω—Å —É—à—ë–ª –≤ –º–∏–Ω—É—Å. –î–∞–≤–∞–π –Ω–∞ –ø–∞—Ä—É –¥–Ω–µ–π –æ–≥—Ä–∞–Ω–∏—á–∏–º –∫–∞—Ñ–µ –∏ —Ç–∞–∫—Å–∏?');
    } else if (balance < 100) {
      tips.add('–ë–∞–ª–∞–Ω—Å –ø–æ—á—Ç–∏ –Ω–∞ –Ω—É–ª–µ. –ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ —Å–µ–π—á–∞—Å –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.');
    } else {
      tips.add('–ë–∞–ª–∞–Ω—Å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ‚Äî —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!');
    }

    // 2) –ë—é–¥–∂–µ—Ç: –ª–∏–º–∏—Ç/—Ç—Ä–∞—Ç—ã
    final limit = await _budgets.getBudget();
    final spent = await _budgets.getSpent();
    if (limit == 0) {
      tips.add('–¢—ã –µ—â—ë –Ω–µ –∑–∞–¥–∞–ª –±—é–¥–∂–µ—Ç. –•–æ—á–µ—à—å, –ø–æ–º–æ–≥—É –ø—Ä–∏–¥—É–º–∞—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –º–µ—Å—è—Ü?');
    } else {
      final ratio = limit > 0 ? spent / limit : 0;
      if (ratio >= 1.0) {
        tips.add('–¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª –±—é–¥–∂–µ—Ç. –ü–æ—Å–º–æ—Ç—Ä–∏–º, –≥–¥–µ –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç—Ä–∞—Ç—ã?');
      } else if (ratio >= 0.9) {
        tips.add('–¢—ã –Ω–∞ —Ñ–∏–Ω–∏—à–Ω–æ–π –ø—Ä—è–º–æ–π –ø–æ –±—é–¥–∂–µ—Ç—É. –ë—É–¥—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ —Å –ø–æ–∫—É–ø–∫–∞–º–∏.');
      }
    }

    // 3) –¶–µ–ª—å: –ø—Ä–æ–≥—Ä–µ—Å—Å/–º–æ—Ç–∏–≤–∞—Ü–∏—è
    final goal = await _goals.getGoal();
    final progress = await _goals.getProgress();
    if (goal <= 0) {
      tips.add('–î–∞–≤–∞–π –ø–æ—Å—Ç–∞–≤–∏–º –ø–µ—Ä–≤—É—é —Ü–µ–ª—å ‚Äî —Ç–∞–∫ –ª–µ–≥—á–µ –∫–æ–ø–∏—Ç—å –∏ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å—É.');
    } else {
      final g = goal == 0 ? 0.0 : progress / goal;
      if (g >= 1.0) {
        tips.add('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üéâ –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é?');
      } else if (g >= 0.8) {
        tips.add('–î–æ —Ü–µ–ª–∏ —Ä—É–∫–æ–π –ø–æ–¥–∞—Ç—å! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ.');
      } else if (g < 0.2 && progress == 0) {
        tips.add('–ù–∞—á–∞—Ç—å –≤—Å–µ–≥–¥–∞ —Å–ª–æ–∂–Ω–æ. –î–∞–≤–∞–π –æ—Ç–ª–æ–∂–∏–º –ø–µ—Ä–≤—É—é —Å—É–º–º—É —Å–µ–≥–æ–¥–Ω—è?');
      }
    }

    // 4) –ö–∞—Ç–µ–≥–æ—Ä–∏—è-–ª–∏–¥–µ—Ä –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
    final expByCat = _tx.totalsByCategory(income: false);
    final totalExp = expByCat.values.fold<double>(0, (a, b) => a + b);
    if (totalExp > 0) {
      final top = expByCat.entries.reduce(
        (a, b) => a.value >= b.value ? a : b,
      );
      final share = top.value / max(0.01, totalExp);
      if (share >= 0.35) {
        tips.add('–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${top.key}" –∑–∞–±–∏—Ä–∞–µ—Ç ${ (share*100).toStringAsFixed(0)}% —Ç—Ä–∞—Ç. –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–∞–º –º–æ–∂–Ω–æ —É—Ä–µ–∑–∞—Ç—å?');
      }
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–º 3‚Äì4 —Å–æ–≤–µ—Ç–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
    if (tips.length > 4) {
      return tips.take(4).toList();
    }
    return tips;
  }
}
