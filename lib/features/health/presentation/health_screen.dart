import 'package:flutter/material.dart';
import '../../../data/services/budgets_service.dart';
import 'widgets/health_trend_chart.dart';
import 'package:fl_chart/fl_chart.dart';

class HealthScreen extends StatefulWidget {
  const HealthScreen({super.key});

  @override
  State<HealthScreen> createState() => _HealthScreenState();
}

class _HealthScreenState extends State<HealthScreen> {
  final _svc = BudgetsService();
  double? _income;
  double? _expense;
  List<FlSpot> _spots = [];
  bool _loading = true;

  @override
  void initState() {
    super.initState();
    _load();
  }

  Future<void> _load() async {
    final inc = await _svc.totalIncome();
    final exp = await _svc.totalExpense();
    final trend = await _svc.cumulativeTrend(); // List<(DateTime,double)>
    // –ü–µ—Ä–µ–≤–µ–¥—ë–º –≤ FlSpot (x = –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å, y = –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å)
    final spots = <FlSpot>[];
    for (var i = 0; i < trend.length; i++) {
      final (_, val) = trend[i];
      spots.add(FlSpot(i.toDouble(), val));
    }
    if (!mounted) return;
    setState(() {
      _income = inc;
      _expense = exp;
      _spots = spots;
      _loading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final inc = _income ?? 0;
    final exp = _expense ?? 0;
    final bal = inc - exp;
    final ratio = (inc > 0) ? (bal / inc).clamp(-1.0, 1.0) : 0.0;
    final isPositive = ratio >= 0;

    String msg;
    if (ratio >= 0.3) {
      msg = '–û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å üëå. –î–æ—Ö–æ–¥—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞—é—Ç —Ä–∞—Å—Ö–æ–¥—ã.';
    } else if (ratio >= 0.0) {
      msg = '–¢—ã –≤ –ø–ª—é—Å–µ, –Ω–æ –±–∞–ª–∞–Ω—Å –Ω–µ–±–æ–ª—å—à–æ–π. –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –∫ —Ç—Ä–∞—Ç–∞–º.';
    } else {
      msg = '–†–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥—ã. –°–æ–≤–µ—Ç Airi: —Å–Ω–∏–∑—å —Ç—Ä–∞—Ç—ã –∏–ª–∏ —É–≤–µ–ª–∏—á—å –¥–æ—Ö–æ–¥.';
    }

    return Scaffold(
      appBar: AppBar(title: const Text('–§–∏–Ω–ó–¥–æ—Ä–æ–≤—å–µ')),
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : RefreshIndicator(
              onRefresh: _load,
              child: ListView(
                padding: const EdgeInsets.all(16),
                children: [
                  Text('–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ', style: Theme.of(context).textTheme.headlineSmall),
                  const SizedBox(height: 12),
                  // –ù–æ–≤—ã–π –ø–ª–∞–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –≤ —Å—Ç–∏–ª–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
                  HealthTrendChart(spots: _spots, isPositive: isPositive),
                  const SizedBox(height: 12),
                  Text(msg, style: Theme.of(context).textTheme.bodyMedium),
                  const SizedBox(height: 16),
                  Row(
                    children: [
                      Expanded(child: _tile(Icons.attach_money, '–î–æ—Ö–æ–¥', inc)),
                      const SizedBox(width: 8),
                      Expanded(child: _tile(Icons.money_off, '–†–∞—Å—Ö–æ–¥', exp)),
                      const SizedBox(width: 8),
                      Expanded(child: _tile(Icons.account_balance, '–ë–∞–ª–∞–Ω—Å', bal)),
                    ],
                  ),
                ],
              ),
            ),
    );
  }

  Widget _tile(IconData ic, String title, double v) {
    return Card(
      child: ListTile(
        leading: Icon(ic),
        title: Text(title),
        subtitle: Text('${v.toStringAsFixed(0)} ‚ÇΩ'),
      ),
    );
  }
}
